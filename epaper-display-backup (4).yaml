# https://github.com/DeastinY/esphome-waveshare-e-paper-dashboard
esphome:
  name: epaper-display
  on_boot:
      priority: 200.0
      then:
        - delay: 5s
        - component.update: eink_display
        - script.execute: update_screen
       # - wait_until:
       #     condition:
       #       lambda: 'return id(data_updated) == true;'
       #       # Wait a bit longer so all the items are received
       # - delay: 5s
       # - logger.log: "Initial sensor data received: Refreshing display..."
       # - lambda: 'id(initial_data_received) = true;'
        
  
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "your own"

ota:
  password: "your own"
  
button:
  - platform: shutdown
    name: "ePaper - Shutdown"
  - platform: restart
    name: "ePaper - Restart"
  - platform: template
    name: "ePaper - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen
      
      
# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'




# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(current_time).now().timestamp);'

time:
 # - platform: homeassistant
 #   id: homeassistant_time
  - platform: sntp
  # id: sntp_time
    id: current_time
    timezone: Europe/Stockholm
    on_time:
      # Every 1 minutes
        - seconds: 0
          minutes: /15
          then:
            - if:
                condition:
                  lambda: 'return id(data_updated) == true;'
                then :
                  - script.execute: update_screen
                  - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
                else:
                  - logger.log: "No sensors updated - skipping display refresh."





wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper-Display-Backup"
    password: "Pk8Qu46DqL4e"

# Include custom fonts
font:

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_xlarge
    size: 150
    glyphs: &mdi-weather-glyphsx
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 96
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_wifi
    size: 20
    glyphs:  &mdi-wifi-xsmall
      - "\U000F092B" # mdi-wifi-strength-alert-outline
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_vejr
    size: 40
    glyphs: &mdi-vejr
      - "\U000F0854" # mdi-bottle-wine
      - "\U000F024A" # mdi-flower
      - "\U000F032A" # mdi-leaf
      - "\U000F05BC" # mdi-table-furniture
      - "\U000F059D" # mdi-weather-windy
      - "\U000F0597" # mdi-weather-rainy   
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F002D" # mdi:greenhouse
      - "\U000F0531" # mdiTree
      - "\U000F04B9" # sofa
      - "\U000F0C67" # dump-truck
   
  - file: 'fonts/00230 Regular.ttf'
    id: clock_font
    size: 90
    glyphs:
      [':', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']


  - file: 'fonts/00230 Regular.ttf'
    id: footer_font
    size: 15
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/GothamRnd-Bold.ttf'
    id: sensor_font
    size: 30
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'æ', 'ø', '/','º','µ','³']
  
  - file: 'fonts/GothamRnd-Book.ttf'
    id: sub_sensor_font
    size: 20
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'æ', 'ø', '/','º','µ','³']
  
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 108
    glyphs: 
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'æ', 'ø', '/','º','µ','³']

  - file: 'fonts/00230 Regular.ttf'
    id: font_title
    size: 54
    glyphs: ['V', 'E', 'J', 'R', 'T', 'Æ', 'Ø', 'Å', ' ']

  
sensor:
  # Create sensors for monitoring Weatherman remotely.
  - platform: template
    name: "ePaper Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "ePaper - Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: "ePaper - WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  - platform: homeassistant
    entity_id: sensor.sensor_ude_temperature
    id: temp_ude
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.sensor_drivhus_temperature
    id: temp_drivhus
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  - platform: homeassistant
    entity_id: sensor.renoweb_haveaffald
    id: renoweb_have
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.renoweb_storskrald
    id: renoweb_storskrald
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.sensor_stue_temperature
    id: temp_stue
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.sensor_vinkaelder_temperature
    id: temp_vinkld
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
 

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_nedboer_0
    id: weather_nedboer_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_vind_0
    id: weather_vind_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_maks_0
    id: weather_temp_maks_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_min_0
    id: weather_temp_min_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  
  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_maks_1
    id: weather_temp_maks_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_min_1
    id: weather_temp_min_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_maks_2
    id: weather_temp_maks_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_min_2
    id: weather_temp_min_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_maks_3
    id: weather_temp_maks_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_min_3
    id: weather_temp_min_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_maks_4
    id: weather_temp_maks_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_temp_min_4
    id: weather_temp_min_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.solopned
    id: sol_op_h
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.solopned
    id: sol_op_m
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  
  - platform: homeassistant
    entity_id: sensor.solopned
    id: sol_ned
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.sun_next_dawn
    id: sol_dawn
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


text_sensor:

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_condition_0
    id: weather_condition_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_condition_1
    id: weather_condition_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_condition_2
    id: weather_condition_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_condition_3
    id: weather_condition_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
    
  - platform: homeassistant
    entity_id: sensor.vejr_nu
    attribute: weather_condition_4
    id: weather_condition_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  - platform: homeassistant
    entity_id: sensor.dayoftheweek
    attribute: day_name_1
    id: day_name_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.dayoftheweek
    attribute: day_name_2
    id: day_name_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.dayoftheweek
    attribute: day_name_3
    id: day_name_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  
  - platform: homeassistant
    entity_id: sensor.dayoftheweek
    attribute: day_name_4
    id: day_name_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'




 # Define colors
color:
  - id: color_bg
    red: 50%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_text
    red: 0%
    green: 100%
    blue: 0%
    white: 0%   
  
# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50in-bV2
    update_interval: 24h
    rotation: 90°
    lambda: |-
     // Map weather states to MDI characters.
     std::map<std::string, std::string> weather_icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };
      int offsetY = 50;

        // Vejret idag
        it.printf(125, 120 - offsetY, id(font_mdi_xlarge), color_text, TextAlign::TOP_CENTER ,"%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
        
        it.printf(300, 200 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F059D");
          // udskift km/t med tekst
         if (id(weather_vind_0).state >= 89) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT ," Storm");
        } else if (id(weather_vind_0).state >= 61) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Kuling");
        } else if (id(weather_vind_0).state >= 49) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Hård Vind");
        } else if (id(weather_vind_0).state >= 38) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Frisk Vind");
        } else if (id(weather_vind_0).state >= 28) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Jævn Vind");
        } else if (id(weather_vind_0).state >= 19) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Let vind");
        } else if (id(weather_vind_0).state >= 6) {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Svag Vind");
        } else {
        it.printf(300, 200 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " Stille");
        } 
        
        it.printf(300, 250 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F0597");
        it.printf(300, 250 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " %.f%%",id(weather_nedboer_0).state);

        // vejr næste 4 dage 75 / 185 / 295 / 455
        it.printf(90, 300 - offsetY, id(font_mdi_large), TextAlign::TOP_CENTER ,"%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
        it.printf(90, 395 - offsetY, id(sub_sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_min_1).state);
        it.printf(90, 425 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_maks_1).state);
        it.printf(90, 455 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%s",id(day_name_1).state.c_str());

        it.printf(200, 300 - offsetY, id(font_mdi_large), TextAlign::TOP_CENTER ,"%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
        it.printf(200, 395 - offsetY, id(sub_sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_min_2).state);
        it.printf(200, 425 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_maks_2).state);
        it.printf(200, 455 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%s",id(day_name_2).state.c_str());

        it.printf(310, 300 - offsetY, id(font_mdi_large), TextAlign::TOP_CENTER ,"%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
        it.printf(310, 395 - offsetY, id(sub_sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_min_3).state);
        it.printf(310, 425 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_maks_3).state);
        it.printf(310, 455 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%s",id(day_name_3).state.c_str());

        it.printf(405, 300 - offsetY, id(font_mdi_large), TextAlign::TOP_CENTER ,"%s", weather_icon_map[id(weather_condition_4).state.c_str()].c_str());
        it.printf(405, 395 - offsetY, id(sub_sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_min_4).state);
        it.printf(405, 425 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%.fºC",id(weather_temp_maks_4).state);
        it.printf(405, 455 - offsetY, id(sensor_font), TextAlign::TOP_CENTER , "%s",id(day_name_4).state.c_str());
        // vejr slut

     
       // renovation
       // Haveaffald  
       it.printf(90, 550 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F032A");
       it.printf(90, 550 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , "%.fd",id(renoweb_have).state);
       //Storskrald
       it.printf(90, 600 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F0C67");
       it.printf(90, 600 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , "%.fd",id(renoweb_storskrald).state);
      // temp ude
       it.printf(350, 550 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F0531");
       it.printf(350, 550 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " %.fºC", id(temp_ude).state);
      //temp inde
       it.printf(350, 600 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F04B9");
       it.printf(350, 600 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " %.fºC", id(temp_stue).state);
       //Wine bottle
       it.printf(350, 650 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F0854"); 
       it.printf(350, 650 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " %.fºC", id(temp_vinkld).state);
       //Drivhus
       it.printf(350, 700 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F002D");
       it.printf(350, 700 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , " %.fºC", id(temp_drivhus).state);
      
       // Sol
       it.printf(90, 650 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F059C");
       // it.printf(90, 650 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , "%.f", id(sol_dawn).state);
       it.printf(90, 700 - offsetY, id(mdi_vejr), TextAlign::BASELINE_RIGHT , "\U000F059B");
       // it.printf(90, 700 - offsetY, id(sensor_font), TextAlign::BASELINE_LEFT , "%.s", id(sol_ned).state);


        // FOOTERT 71
        it.strftime(250, 730 , id(footer_font), TextAlign::BASELINE_RIGHT , "Opd. %d/%b/%Y %H:%M", id(current_time).now());

        // WiFi Signal Strenght 
        if(id(wifisignal).has_state()) {
          int x = 455;
          int y = 730;
          if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0928");
            ESP_LOGI("WiFi", "Exellent");
          } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0925");
            ESP_LOGI("WiFi", "Good");
          } else if (id(wifisignal).state  >= -75) {
            //Fair
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0922");
            ESP_LOGI("WiFi", "Fair");
          } else if (id(wifisignal).state  >= -100) {
            //Weak
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F091F");
            ESP_LOGI("WiFi", "Weak");
          } else {
            //Unlikely working signal
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F092B");
            ESP_LOGI("WiFi", "Unlikely");
          }
        }      
      
captive_portal:
